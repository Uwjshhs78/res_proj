[{"sha":"103ccf301bab5a3bd8e45b8b9beb203ced47c924","node_id":"MDY6Q29tbWl0MTA2MzA2MDU2OjEwM2NjZjMwMWJhYjVhM2JkOGU0NWI4YjliZWIyMDNjZWQ0N2M5MjQ=","commit":{"author":{"name":"Jean-Daniel","email":"Jean-Daniel@users.noreply.github.com","date":"2021-08-01T13:19:29Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-08-01T13:19:29Z"},"message":"Kap 09 (#701)\n\n* [kap-9] Rewrite helm_fetch to use helm_cli.\r\n\r\nAn actually difference with the cffi implementation is that  if something goes wrong,\r\nit raises a HelmFetchingError instead of silently failing.\r\n\r\nIt is consistent with Git and Http behaviour which raise errors too if the fetch operation fails.\r\n\r\n* [kap-9] Rewrite helm input using helm cli.\r\n\r\nIt mostly matches the cffi implementation with one difference:\r\n- release_name is required when using Helm CLI. This implementation uses —generate-name flag if neither release_name nor template_name are specified, which may cause different output.\r\n\r\nThis commit also add `validate` flag support, which is required to compile some templates that rely on cluster Capabilities (cilium with ServiceMonitor for instance).\r\n\r\n* Ignore helm stdout.\r\n\r\n* [helm] add include_crds and skip_tests options.\r\n\r\n* [helm] log helm commands arguments.\r\n\r\n* [helm] Fix usage of undefined var.\r\n\r\n* Support arbitrary flags for helm input.\r\n\r\n* [helm] Abort compilation on invalid flag.\r\n\r\n- reduce denied flags list to the bare minimum. No need to raise error when using an irrelevant flag like atomic.\r\n- raise an error if flags contains a '-' instead of '_'. Allowing both may cause subtle bugs if both syntaxes are used in the same target for the same flag.\r\n\r\n* Typo in doc\r\n\r\nCo-authored-by: Simon Rüegg <simon@rueggs.ch>\r\n\r\n* Add `output_file` helm params.\r\n\r\nWhen specified, run helm template without specifying --output-dir and pipe the result into a single file.\r\n\r\n* Add 2 ways to specify custom helm binary.\r\n\r\nAll helm invocation will try to use the value set in the env var KAPITAN_HELM_PATH.\r\nFetch and compile action takes a helm_path parameter to specify per target helm binary.\r\n\r\nCo-authored-by: Jean-Daniel Dupas <jddupas@xooloo.com>\r\nCo-authored-by: Simon Rüegg <simon@rueggs.ch>\r\nCo-authored-by: Ricardo Amaro <ricardo.amaro@gmail.com>","tree":{"sha":"270db3a7b8b8970567325e7f3b957d30ba08b608","url":"https://api.github.com/repos/kapicorp/kapitan/git/trees/270db3a7b8b8970567325e7f3b957d30ba08b608"},"url":"https://api.github.com/repos/kapicorp/kapitan/git/commits/103ccf301bab5a3bd8e45b8b9beb203ced47c924","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhBp9hCRBK7hj4Ov3rIwAAIZEIAChS3E/QxvZhMQ72bjyaGOs1\nqr7KogC0q8XHDSQSC15DmRzDZEZX/b/vznms+MoCCXxjfRKEJ+K0jQWEO+rZ9WP4\nv5FedbUfy4hVFzoZrTxNLanaHS80vbjW3HyHlYW7H9ugaXYBVH6X8nVpU1Zq/w/Y\nhtFAbhbZb2o2mu3YDqNGmvORlCxoEuU4E+EANIeWjVHHaBPqq2pQm/feOFQRbBxE\nwsMkl/iz2LLAeO4WHV+jzrrhjI54zscq5r+6qpITrLf4XW7853TExefKQQGyQfUJ\nkDKK4yW/NRG+zD5Z8AkUKgQF4jjqYatyBdJ0wkyLoZ5xA/kATDH63FktRdPhKVI=\n=We+H\n-----END PGP SIGNATURE-----\n","payload":"tree 270db3a7b8b8970567325e7f3b957d30ba08b608\nparent 97f42a316b370caed5ed8f38fe9be4d7a1add503\nauthor Jean-Daniel <Jean-Daniel@users.noreply.github.com> 1627823969 +0200\ncommitter GitHub <noreply@github.com> 1627823969 +0100\n\nKap 09 (#701)\n\n* [kap-9] Rewrite helm_fetch to use helm_cli.\r\n\r\nAn actually difference with the cffi implementation is that  if something goes wrong,\r\nit raises a HelmFetchingError instead of silently failing.\r\n\r\nIt is consistent with Git and Http behaviour which raise errors too if the fetch operation fails.\r\n\r\n* [kap-9] Rewrite helm input using helm cli.\r\n\r\nIt mostly matches the cffi implementation with one difference:\r\n- release_name is required when using Helm CLI. This implementation uses —generate-name flag if neither release_name nor template_name are specified, which may cause different output.\r\n\r\nThis commit also add `validate` flag support, which is required to compile some templates that rely on cluster Capabilities (cilium with ServiceMonitor for instance).\r\n\r\n* Ignore helm stdout.\r\n\r\n* [helm] add include_crds and skip_tests options.\r\n\r\n* [helm] log helm commands arguments.\r\n\r\n* [helm] Fix usage of undefined var.\r\n\r\n* Support arbitrary flags for helm input.\r\n\r\n* [helm] Abort compilation on invalid flag.\r\n\r\n- reduce denied flags list to the bare minimum. No need to raise error when using an irrelevant flag like atomic.\r\n- raise an error if flags contains a '-' instead of '_'. Allowing both may cause subtle bugs if both syntaxes are used in the same target for the same flag.\r\n\r\n* Typo in doc\r\n\r\nCo-authored-by: Simon Rüegg <simon@rueggs.ch>\r\n\r\n* Add `output_file` helm params.\r\n\r\nWhen specified, run helm template without specifying --output-dir and pipe the result into a single file.\r\n\r\n* Add 2 ways to specify custom helm binary.\r\n\r\nAll helm invocation will try to use the value set in the env var KAPITAN_HELM_PATH.\r\nFetch and compile action takes a helm_path parameter to specify per target helm binary.\r\n\r\nCo-authored-by: Jean-Daniel Dupas <jddupas@xooloo.com>\r\nCo-authored-by: Simon Rüegg <simon@rueggs.ch>\r\nCo-authored-by: Ricardo Amaro <ricardo.amaro@gmail.com>"}},"url":"https://api.github.com/repos/kapicorp/kapitan/commits/103ccf301bab5a3bd8e45b8b9beb203ced47c924","html_url":"https://github.com/kapicorp/kapitan/commit/103ccf301bab5a3bd8e45b8b9beb203ced47c924","comments_url":"https://api.github.com/repos/kapicorp/kapitan/commits/103ccf301bab5a3bd8e45b8b9beb203ced47c924/comments","author":{"login":"Jean-Daniel","id":304649,"node_id":"MDQ6VXNlcjMwNDY0OQ==","avatar_url":"https://avatars.githubusercontent.com/u/304649?v=4","gravatar_id":"","url":"https://api.github.com/users/Jean-Daniel","html_url":"https://github.com/Jean-Daniel","followers_url":"https://api.github.com/users/Jean-Daniel/followers","following_url":"https://api.github.com/users/Jean-Daniel/following{/other_user}","gists_url":"https://api.github.com/users/Jean-Daniel/gists{/gist_id}","starred_url":"https://api.github.com/users/Jean-Daniel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jean-Daniel/subscriptions","organizations_url":"https://api.github.com/users/Jean-Daniel/orgs","repos_url":"https://api.github.com/users/Jean-Daniel/repos","events_url":"https://api.github.com/users/Jean-Daniel/events{/privacy}","received_events_url":"https://api.github.com/users/Jean-Daniel/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"97f42a316b370caed5ed8f38fe9be4d7a1add503","url":"https://api.github.com/repos/kapicorp/kapitan/commits/97f42a316b370caed5ed8f38fe9be4d7a1add503","html_url":"https://github.com/kapicorp/kapitan/commit/97f42a316b370caed5ed8f38fe9be4d7a1add503"}]}]