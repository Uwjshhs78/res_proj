[{"sha":"4adc0c21329301febad9ad36531fd4f684c6b394","node_id":"MDY6Q29tbWl0MzAzMzQ0MTUxOjRhZGMwYzIxMzI5MzAxZmViYWQ5YWQzNjUzMWZkNGY2ODRjNmIzOTQ=","commit":{"author":{"name":"Alan Cruikshanks","email":"alan.cruikshanks@gmail.com","date":"2021-06-25T13:45:08Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-06-25T13:45:08Z"},"message":"Remove hpal support and update server.js (#467)\n\nBack when we initialised the project we had the intention of using [hpal-debug](https://github.com/hapipal/hpal-debug) to support our work. The idea we really liked was being able to interact with our Objection models in a REPL. For those of us with Ruby & Rails backgrounds, the idea brought us much joy.\r\n\r\nFast forward a year and we've never actually taken the time to hook up Objection properly plus no one on the team can recall ever using the Hpal debugging tools.\r\n\r\nSo, to help keep the project lean and mean we're dropping it from the project, which includes updating `server.js to follow the pattern we see in other projects and the Hapi docs. Specifically, the example the Hapi docs provide for setting up and running the Hapi server.\r\n\r\nhttps://hapi.dev/tutorials/testing/?lang=en_US\r\n\r\nThis version also supports testing (because duh, of course we're testing) as opposed to the one in their 'Getting started' section. Rather than try and be clever about having the code determine if it was just required or actually run, it expects the caller to make that determination by the method it calls. In tests you'd call `init()`, and to actually run the server you add an `index.js` and call `start()` from it.\r\n\r\n** Notes\r\n\r\nWe move the plugin registration into its own method. This is just to make things clearer, and again, to bring the `init()` and `start()` methods inline with the Hapi example.\r\n\r\nAlso, the Hapi example does not include a call to `init()`. We tried not doing that but though the server ran, nothing was registered, not even the routes. So, we think this is an oversight in their example.\r\n\r\nWe also moved server.js into the app folder. With index.js now at the root it makes sense to us to move server.js into the `app/` folder with the rest of the application code.\r\n\r\nFinally, another deviation from the Hapi example. Initially, we set `server` as a const in `server.js` as per the Hapi example. TBH, we're not sure how their example would work in the real world because we found a massive chunk of our tests were now failing. The first use of `init()` would work. But any subsequent call would fail with an error telling us `HapiNowAuthPlugin` is already registered. A review of the file spotted the problem. With `const server` being declared in the root of the module, the first call to `init()` would set the instance variable. All subsequent calls would be trying to interact with that same instance, which will already have had all the plugins registered and have been initialised. So, we solved the problem by moving the server instance into the scope of `init()`. Now each call will get its own instance avoiding any conflicts in the tests.","tree":{"sha":"a230518413c17ae1e0c8f1b7d1d11f305efc7028","url":"https://api.github.com/repos/DEFRA/sroc-charging-module-api/git/trees/a230518413c17ae1e0c8f1b7d1d11f305efc7028"},"url":"https://api.github.com/repos/DEFRA/sroc-charging-module-api/git/commits/4adc0c21329301febad9ad36531fd4f684c6b394","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1d3kCRBK7hj4Ov3rIwAAkGMIAGx+GV2A5aZL6woljB+Z7MKa\nI8niWY5k3halRtXbSuaFluK04RQgwS0sjr/Wwe8b4UF9ougrI2MLHFp5ZvU++cBl\n0tnAYcbD/PWB/ipemFB1+YbmQeGiypQXW1T8i+VYSkC+ddAUGOBsFqAvzVoe6YLo\nAb70Xwn9SA32QBxN4OWz9qbr2c9UoijsTKVbqN59IrNOsjeU6QEopmDvQ21PB5YJ\nYRc4AiTD2FKkhvh3RdyRqiouecFW0bIoP/xBDdb15OcI+FBbidbbM9UwjSK8KZ46\n2bhQ21wmkNSmrXMJE4JzuArQcRJk+8jmE1fcqeRkJC4D+0WW0h0cJM5lGBXr8E8=\n=uDhM\n-----END PGP SIGNATURE-----\n","payload":"tree a230518413c17ae1e0c8f1b7d1d11f305efc7028\nparent 652a9a01ba5977de61136befd2f56cdf245835a2\nauthor Alan Cruikshanks <alan.cruikshanks@gmail.com> 1624628708 +0100\ncommitter GitHub <noreply@github.com> 1624628708 +0100\n\nRemove hpal support and update server.js (#467)\n\nBack when we initialised the project we had the intention of using [hpal-debug](https://github.com/hapipal/hpal-debug) to support our work. The idea we really liked was being able to interact with our Objection models in a REPL. For those of us with Ruby & Rails backgrounds, the idea brought us much joy.\r\n\r\nFast forward a year and we've never actually taken the time to hook up Objection properly plus no one on the team can recall ever using the Hpal debugging tools.\r\n\r\nSo, to help keep the project lean and mean we're dropping it from the project, which includes updating `server.js to follow the pattern we see in other projects and the Hapi docs. Specifically, the example the Hapi docs provide for setting up and running the Hapi server.\r\n\r\nhttps://hapi.dev/tutorials/testing/?lang=en_US\r\n\r\nThis version also supports testing (because duh, of course we're testing) as opposed to the one in their 'Getting started' section. Rather than try and be clever about having the code determine if it was just required or actually run, it expects the caller to make that determination by the method it calls. In tests you'd call `init()`, and to actually run the server you add an `index.js` and call `start()` from it.\r\n\r\n** Notes\r\n\r\nWe move the plugin registration into its own method. This is just to make things clearer, and again, to bring the `init()` and `start()` methods inline with the Hapi example.\r\n\r\nAlso, the Hapi example does not include a call to `init()`. We tried not doing that but though the server ran, nothing was registered, not even the routes. So, we think this is an oversight in their example.\r\n\r\nWe also moved server.js into the app folder. With index.js now at the root it makes sense to us to move server.js into the `app/` folder with the rest of the application code.\r\n\r\nFinally, another deviation from the Hapi example. Initially, we set `server` as a const in `server.js` as per the Hapi example. TBH, we're not sure how their example would work in the real world because we found a massive chunk of our tests were now failing. The first use of `init()` would work. But any subsequent call would fail with an error telling us `HapiNowAuthPlugin` is already registered. A review of the file spotted the problem. With `const server` being declared in the root of the module, the first call to `init()` would set the instance variable. All subsequent calls would be trying to interact with that same instance, which will already have had all the plugins registered and have been initialised. So, we solved the problem by moving the server instance into the scope of `init()`. Now each call will get its own instance avoiding any conflicts in the tests.\r\n"}},"url":"https://api.github.com/repos/DEFRA/sroc-charging-module-api/commits/4adc0c21329301febad9ad36531fd4f684c6b394","html_url":"https://github.com/DEFRA/sroc-charging-module-api/commit/4adc0c21329301febad9ad36531fd4f684c6b394","comments_url":"https://api.github.com/repos/DEFRA/sroc-charging-module-api/commits/4adc0c21329301febad9ad36531fd4f684c6b394/comments","author":{"login":"Cruikshanks","id":1789650,"node_id":"MDQ6VXNlcjE3ODk2NTA=","avatar_url":"https://avatars.githubusercontent.com/u/1789650?v=4","gravatar_id":"","url":"https://api.github.com/users/Cruikshanks","html_url":"https://github.com/Cruikshanks","followers_url":"https://api.github.com/users/Cruikshanks/followers","following_url":"https://api.github.com/users/Cruikshanks/following{/other_user}","gists_url":"https://api.github.com/users/Cruikshanks/gists{/gist_id}","starred_url":"https://api.github.com/users/Cruikshanks/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Cruikshanks/subscriptions","organizations_url":"https://api.github.com/users/Cruikshanks/orgs","repos_url":"https://api.github.com/users/Cruikshanks/repos","events_url":"https://api.github.com/users/Cruikshanks/events{/privacy}","received_events_url":"https://api.github.com/users/Cruikshanks/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"652a9a01ba5977de61136befd2f56cdf245835a2","url":"https://api.github.com/repos/DEFRA/sroc-charging-module-api/commits/652a9a01ba5977de61136befd2f56cdf245835a2","html_url":"https://github.com/DEFRA/sroc-charging-module-api/commit/652a9a01ba5977de61136befd2f56cdf245835a2"}]}]