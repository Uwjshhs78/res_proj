[{"sha":"8e221ae98269a0d30f50ad481ed97e84e2dbcc42","node_id":"MDY6Q29tbWl0MjcxMzAwNDI6OGUyMjFhZTk4MjY5YTBkMzBmNTBhZDQ4MWVkOTdlODRlMmRiY2M0Mg==","commit":{"author":{"name":"Fitz Elliott","email":"fitz@cos.io","date":"2021-01-10T20:14:48Z"},"committer":{"name":"Fitz Elliott","email":"fitz@cos.io","date":"2021-07-27T03:16:41Z"},"message":"make OneDrive provider read-write\n\n * Add read/write (rw) support to the OneDrive provider.  This\n   provider was originally developed with rw support in mind, but we\n   opted to release a simpler version without write support.  Since\n   then we haven't had many requests for write support for Personal\n   OneDrive, but there are entities with an interest in rw support for\n   OneDrive for Business (OD4B).  This branch resurrects the original\n   rw support for the modern (and greatly-diverged) codebase.\n\n * Annotate readonly (ro) and rw method groups by adding comment\n   dividers.\n\n * Replace default implementations of rw methods with actual\n   implementations.  These were adapted from the work of Ryan Casey\n   (@caseyrygt) & Oleksandr Melnykov (@alexandr-melnikov-dev-pro).\n\n   * Add `has_real_root()` method.\n\n   * Update `_build_/foo/_url` utility methods.  Old code uses\n     `_build_drive_url` and `_build_content_url`.  New code uses\n     `_build_item_url` and `_build_root_url`.  Update both provider\n     and tests to use these new methods.\n\n   * Update paths & identifiers:\n\n     * OneDrive path identifiers are either `root` (for the root\n       folder) or of the format `${foo}!${bar}`, where `$foo` is the\n       root id and `$bar` is a monotonically-increasing number.  There\n       was some legacy code that expected that the root path\n       identifier could be `'0'`.  This was probably carryover from\n       the Box provider, which this provider was based off of.\n\n     * Some code was calling a OneDrivePath method, `api_identifier`,\n       to get the relevant url segments.  Why should OneDrivePath know\n       about OneDrive API urls?  It shouldn't!  That's a job for the\n       provider.  Remove it.\n\n     * Expand `OneDrivePath` test coverage; add test for alternate\n       exception branch test.\n\n   * Update `revalidate_path()` for read-write support\n\n     * Propagate path's parent id in return val.\n\n     * Fix `revalidate_path` tests since R/W support means\n       non-existent paths should still validate.  Instead of returning\n       404s, non-existing paths should return a new ODPath object\n       without an identifier for the last path part.\n\n   * Remove untestable \"is deleted\" condition in `metadata()` method.\n\n   * Add `shares_storage_root()` method.\n\n   * Update `can_intra_{move,copy}()` methods for rw support.\n\n   * Implement `upload()` method.\n\n   * Implement `create_folder()` method.  Changes from prior work:\n\n     * Propagate path's parent id in return val.\n\n     * `create_folder()` log creation was broken b/c the original\n       implementation was passing the wrong path when building the\n       metadata object for the new folder.  Additionaly, as an\n       ID-based provider, it needs to explicitly set the new path's\n       id.\n\n   * Implement delete() method.  Changes from prior work:\n\n     * Move root deletion logic into its own method,\n       `_delete_folder_contents`.\n\n   * Implement intra_{copy,move} methods. Changes from prior work:\n\n     * Update `intra_move`'s returned path to use `new_from_response`\n       instead of non-existent `update_from_response`.\n\n     * Fix return val of `intra_{move,copy}()`.  It had been returning\n       the same data as `construct_metadata()`, which turns folder\n       requests into a list of the folder's children.\n       `intra_{move,copy}()` should return an actual\n       `OneDriveFolderMetadata` object with the list of children as an\n       attribute.\n\n   * Update provider tests:\n\n     * Ditch TestReadOnlyProvider.\n\n     * TestOperations: Update existing and add\n       `test_shares_storage_root`.\n\n     * TestCreateFolder: adapted from prior code; updated for new code\n       changes and expanded coverage\n\n     * TestUpload: adapted from prior code; updated for new code\n       changes\n\n     * TestDelete: adapted from prior code; rewrite delete tests and\n       update fixtures\n\n     * Comment out unimplemented tests for now.\n\n * metadata.py: remove some conditional gets from the metadata\n   processors.  So far it looks like these fields are always present.\n\n * Add test for `metadata()` on empty folder to improve coverage.\n\n * deploy: pin pip & cryptography in Dockerfile to fix dependency\n   issues blocking deployment.","tree":{"sha":"4723e34ae8f683fbf859c70221f26a726cf35ff1","url":"https://api.github.com/repos/CenterForOpenScience/waterbutler/git/trees/4723e34ae8f683fbf859c70221f26a726cf35ff1"},"url":"https://api.github.com/repos/CenterForOpenScience/waterbutler/git/commits/8e221ae98269a0d30f50ad481ed97e84e2dbcc42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/CenterForOpenScience/waterbutler/commits/8e221ae98269a0d30f50ad481ed97e84e2dbcc42","html_url":"https://github.com/CenterForOpenScience/waterbutler/commit/8e221ae98269a0d30f50ad481ed97e84e2dbcc42","comments_url":"https://api.github.com/repos/CenterForOpenScience/waterbutler/commits/8e221ae98269a0d30f50ad481ed97e84e2dbcc42/comments","author":{"login":"felliott","id":86835,"node_id":"MDQ6VXNlcjg2ODM1","avatar_url":"https://avatars.githubusercontent.com/u/86835?v=4","gravatar_id":"","url":"https://api.github.com/users/felliott","html_url":"https://github.com/felliott","followers_url":"https://api.github.com/users/felliott/followers","following_url":"https://api.github.com/users/felliott/following{/other_user}","gists_url":"https://api.github.com/users/felliott/gists{/gist_id}","starred_url":"https://api.github.com/users/felliott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/felliott/subscriptions","organizations_url":"https://api.github.com/users/felliott/orgs","repos_url":"https://api.github.com/users/felliott/repos","events_url":"https://api.github.com/users/felliott/events{/privacy}","received_events_url":"https://api.github.com/users/felliott/received_events","type":"User","site_admin":false},"committer":{"login":"felliott","id":86835,"node_id":"MDQ6VXNlcjg2ODM1","avatar_url":"https://avatars.githubusercontent.com/u/86835?v=4","gravatar_id":"","url":"https://api.github.com/users/felliott","html_url":"https://github.com/felliott","followers_url":"https://api.github.com/users/felliott/followers","following_url":"https://api.github.com/users/felliott/following{/other_user}","gists_url":"https://api.github.com/users/felliott/gists{/gist_id}","starred_url":"https://api.github.com/users/felliott/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/felliott/subscriptions","organizations_url":"https://api.github.com/users/felliott/orgs","repos_url":"https://api.github.com/users/felliott/repos","events_url":"https://api.github.com/users/felliott/events{/privacy}","received_events_url":"https://api.github.com/users/felliott/received_events","type":"User","site_admin":false},"parents":[{"sha":"1146fd44cc90324d9207db81bd12662ee94f849b","url":"https://api.github.com/repos/CenterForOpenScience/waterbutler/commits/1146fd44cc90324d9207db81bd12662ee94f849b","html_url":"https://github.com/CenterForOpenScience/waterbutler/commit/1146fd44cc90324d9207db81bd12662ee94f849b"}]}]